>> % if you have an array, you can add any number to all the elements in an array
>> x = [1 2 3 4; 5 6 7 8]

x =

     1     2     3     4
     5     6     7     8

>> % if we want to add 2 to each element of this array
>> x = x+2

x =

     3     4     5     6
     7     8     9    10

>> x

x =

     3     4     5     6
     7     8     9    10

>> y = [ 6 5 4 3;9 8 7 6]

y =

     6     5     4     3
     9     8     7     6

>> x+y

ans =

     9     9     9     9
    16    16    16    16

>> z = x+y

z =

     9     9     9     9
    16    16    16    16

>> % we can add arrays of same dimensions only, we cannot add the elements 
>> % of arrays of two different arrays
>> %similarly, we can multiply and divide as well 
>> x

x =

     3     4     5     6
     7     8     9    10

>> x/5

ans =

    0.6000    0.8000    1.0000    1.2000
    1.4000    1.6000    1.8000    2.0000

>> % size function
>> x = [1 2 3 4; 5 6 7 8]

x =

     1     2     3     4
     5     6     7     8

>> x

x =

     1     2     3     4
     5     6     7     8

>> s = size(x)

s =

     2     4

>> %The size function can be applied to a matrix to produce either a single output variable or two output variables.
>> %Use square brackets ([ ]) to obtain more than one output.
>> %Syntax:
 %[xrow,xcol] = size(x)
>> x

x =

     1     2     3     4
     5     6     7     8

>> [xrow,xcol]=size(x)

xrow =

     2


xcol =

     4

>> %The size function can be applied to a matrix to produce either a single output variable or two output variables.
>> %Use square brackets ([ ]) to obtain more than one output.
>> %Syntax:
 %[xrow,xcol] = size(x)
>> x

x =

     1     2     3     4
     5     6     7     8

>> [xrow,xcol]=size(x)

xrow =

     2


xcol =

     4

>> %The max function will let us know the highest amount and it’s position in the vector!
>> %Syntax:
 %[max_value,index of the max value element] = max(array_name)
>>  x=	[1500	2500	1600	1800	2700]

x =

        1500        2500        1600        1800        2700

>> [max_value,index_max_value] = max(x)

max_value =

        2700


index_max_value =

     5
>> x = [1 2 3 4 5 6 7 8]

x =

     1     2     3     4     5     6     7     8

>> x = [1;2;3;4;5;6;7;8]

x =

     1
     2
     3
     4
     5
     6
     7
     8

>> y =[100;120;80;90;70;60;50]

y =

   100
   120
    80
    90
    70
    60
    50

>> x = [1;2;3;4;5;6;7]

x =

     1
     2
     3
     4
     5
     6
     7

>> plot(x,y)
>> title("Weekly Rainfall")
>>  plot(x,y), 
title("Weekly Rainfall"), 
xlabel("Days of the week"), 
ylabel("Rainfall per day")
>> %Following are the color options available in MATLAB!
k- black
b- blue
r- red
c- cyan
m- magenta
g- green
y- yellow
w- white

>> plot(x,y,’r’)
>> y

y =

   100
   120
    80
    90
    70
    60
    50

>> bar(y)
>> % hlps to make a bar graph
>> y = [55 45 50 40 60]

y =

    55    45    50    40    60

>> bar(y)
>>  X = categorical({'Arts','Science','Commerce','IT','Engineering'});
>>  X = reordercats(X,{'Arts','Science','Commerce','IT','Engineering'})

X = 

  1×5 categorical array

     Arts      Science      Commerce      IT      Engineering 

>> y = [55 45 50 40 60]; 
bar(X,y)
>> >>  a=[30 25 20 25]

a =

    30    25    20    25
>> labels = {'Tea','Coffee','Milk','Others'};
>> pie(a,labels)
>> x=rand 
if x>1 	
	y=5 
else  	
	y=0 
end

x =

    0.1419


y =

     0

>> x=5 
if x<4 	
	y=5 
else  	
	y=0 
end

x =

     5


y =

     0

>>  for	x=1:5 	
	disp(a) 
end
    30    25    20    25

    30    25    20    25

    30    25    20    25

    30    25    20    25

    30    25    20    25

>> for	x=1:2:10 	
	disp(x) 
end
     1

     3

     5

     7

     9

>> help
--- help for end ---

 end Terminate scope of FOR, WHILE, SWITCH, TRY, and IF statements.
    Without end's, FOR, WHILE, SWITCH, TRY, and IF wait for further input.
    Each end is paired with the closest previous unpaired FOR, WHILE,
    SWITCH, TRY or IF and serves to terminate its scope.
 
    end also marks the termination of a function, although in
    most cases it is optional. end statements are required only in 
    MATLAB files that employ one or more nested functions. Within such a
    file, every function (including primary, nested, private, and 
    subfunctions) must be terminated with an end statement. You can 
    terminate any function type with end, but doing so is not required
    unless the file contains a nested function.
 
    end can also serve as the last index in an indexing expression.  In
    that context, end = SIZE(X,k) when used as part of the k-th index.
    Examples of this use are, X(3:end) and X(1,1:2:end-1).  When using end
    to grow an array, as in X(end+1) = 5, make sure X exists first.
 
    end(A,K,N) is called for indexing expressions involving the object A
    when end is part of the K-th index out of N indices.  For example,
    the expression A(end-1,:) calls A's end method with end(A,1,2).
 
    See also for, while, switch, try, if.

    Documentation for end
    Other functions named end

>> help plot
 plot   Linear plot. 
    plot(X,Y) plots vector Y versus vector X. If X or Y is a matrix,
    then the vector is plotted versus the rows or columns of the matrix,
    whichever line up.  If X is a scalar and Y is a vector, disconnected
    line objects are created and plotted as discrete points vertically at
    X.
 
    plot(Y) plots the columns of Y versus their index.
    If Y is complex, plot(Y) is equivalent to plot(real(Y),imag(Y)).
    In all other uses of plot, the imaginary part is ignored.
 
    Various line types, plot symbols and colors may be obtained with
    plot(X,Y,S) where S is a character string made from one element
    from any or all the following 3 columns:
 
           b     blue          .     point              -     solid
           g     green         o     circle             :     dotted
           r     red           x     x-mark             -.    dashdot 
           c     cyan          +     plus               --    dashed   
           m     magenta       *     star             (none)  no line
           y     yellow        s     square
           k     black         d     diamond
           w     white         v     triangle (down)
                               ^     triangle (up)
                               <     triangle (left)
                               >     triangle (right)
                               p     pentagram
                               h     hexagram
                          
    For example, plot(X,Y,'c+:') plots a cyan dotted line with a plus 
    at each data point; plot(X,Y,'bd') plots blue diamond at each data 
    point but does not draw any line.
 
    plot(X1,Y1,S1,X2,Y2,S2,X3,Y3,S3,...) combines the plots defined by
    the (X,Y,S) triples, where the X's and Y's are vectors or matrices 
    and the S's are strings.  
 
    For example, plot(X,Y,'y-',X,Y,'go') plots the data twice, with a
    solid yellow line interpolating green circles at the data points.
 
    The plot command, if no color is specified, makes automatic use of
    the colors specified by the axes ColorOrder property.  By default,
    plot cycles through the colors in the ColorOrder property.  For
    monochrome systems, plot cycles over the axes LineStyleOrder property.
 
    Note that RGB colors in the ColorOrder property may differ from
    similarly-named colors in the (X,Y,S) triples.  For example, the 
    second axes ColorOrder property is medium green with RGB [0 .5 0],
    while plot(X,Y,'g') plots a green line with RGB [0 1 0].
 
    If you do not specify a marker type, plot uses no marker. 
    If you do not specify a line style, plot uses a solid line.
 
    plot(AX,...) plots into the axes with handle AX.
 
    plot returns a column vector of handles to lineseries objects, one
    handle per plotted line. 
 
    The X,Y pairs, or X,Y,S triples, can be followed by 
    parameter/value pairs to specify additional properties 
    of the lines. For example, plot(X,Y,'LineWidth',2,'Color',[.6 0 0]) 
    will create a plot with a dark red line width of 2 points.
 
    Example
       x = -pi:pi/10:pi;
       y = tan(sin(x)) - sin(tan(x));
       plot(x,y,'--rs','LineWidth',2,...
                       'MarkerEdgeColor','k',...
                       'MarkerFaceColor','g',...
                       'MarkerSize',10)
 
    See also plottools, semilogx, semilogy, loglog, plotyy, plot3, grid,
    title, xlabel, ylabel, axis, axes, hold, legend, subplot, scatter.

    Documentation for plot
    Other functions named plot

>> help disp
 disp Display array.
    disp(X) displays array X without printing the array name or 
    additional description information such as the size and class name.
    In all other ways it's the same as leaving the semicolon off an
    expression except that nothing is shown for empty arrays.
 
    If X is a string or character array, the text is displayed.
 
    See also fprintf, sprintf, int2str, num2str, rats, format, details.

    Documentation for disp
    Other functions named disp

>> 
